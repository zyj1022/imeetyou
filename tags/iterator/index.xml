<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Iterator on 知也无涯</title><link>/tags/iterator/</link><description>Recent content in Iterator on 知也无涯</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>ZHIKING</copyright><lastBuildDate>Fri, 31 Mar 2017 17:56:19 +0000</lastBuildDate><atom:link href="/tags/iterator/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式之迭代器模式(Iterator)</title><link>/post/2017/js-dp-iterator/</link><pubDate>Fri, 31 Mar 2017 17:56:19 +0000</pubDate><guid>/post/2017/js-dp-iterator/</guid><description>&lt;p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。&lt;/p>
&lt;p>比如：JavaScript 的 &lt;code>Array.prototype.forEach&lt;/code>&lt;/p>
&lt;p>jQuery里一个非常有名的迭代器就是 &lt;code>$.each&lt;/code> 方法，通过each我们可以传入额外的function，然后来对所有的item项进行迭代操作，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$.each( [1, 2, 3], function( i, n ){
console.log( &amp;#39;当前下标为： &amp;#39;+ i,&amp;#39;当前值为:&amp;#39; + n );
});
// 下标： 0 当前值:1
// 下标： 1 当前值:2
// 下标： 2 当前值:3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>